---
- name: Setup Base System and Dependencies (Rocky Linux 9)
  hosts: localhost
  gather_facts: yes
  become: yes

  vars:
    user_name: vagrant
    user_home: "/home/{{ user_name }}"
    sqlite_download_url: "https://raw.githubusercontent.com/negun2/soldesk/main/files/sqlite-snapshot-202505171106.tar.gz"
    sqlite_downloaded_filename: "sqlite-snapshot-202505171106.tar.gz"
    sqlite_download_dest_dir: "/tmp/sqlite_downloaded"
    sqlite_install_prefix: "/usr/local"
    postgres_user: "django"
    postgres_password: "changeme123"
    postgres_db: "onpremwebdb"
    allowed_host_domain: "{{ ansible_default_ipv4.address | default('127.0.0.1') }}"
    secret_key_path: "{{ user_home }}/.django_secret.key"

  tasks:
    - name: Install required system packages
      dnf:
        name:
          - epel-release
          - python3
          - python3-pip
          - python3-devel
          - gcc
          - git
          - wget
          - readline-devel
          - zlib-devel
          - libffi-devel
          - openssl-devel
          - postgresql-server
          - postgresql-contrib
          - postgresql-devel
          - firewalld
        state: present

    - name: Start and enable firewalld
      service:
        name: firewalld
        state: started
        enabled: yes

    - name: Configure firewalld for PostgreSQL and HTTP/HTTPS
      firewalld:
        port: "{{ item }}"
        permanent: true
        state: enabled
        immediate: yes
      loop:
        - 5432/tcp
        - 80/tcp
        - 443/tcp

    - name: Initialize PostgreSQL
      command: postgresql-setup --initdb
      args:
        creates: /var/lib/pgsql/data/PG_VERSION

    - name: Enable PostgreSQL listen_addresses
      lineinfile:
        path: /var/lib/pgsql/data/postgresql.conf
        regexp: '^#?listen_addresses'
        line: "listen_addresses = '*'"

    - name: Allow remote access in pg_hba.conf
      lineinfile:
        path: /var/lib/pgsql/data/pg_hba.conf
        insertafter: '^# IPv4'
        line: "host    all             all             0.0.0.0/0               md5"

    - name: Start and enable PostgreSQL
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Set PostgreSQL password for user
      become: yes
      become_user: postgres
      environment:
        ANSIBLE_REMOTE_TEMP: /tmp/ansible
      postgresql_user:
        name: "{{ postgres_user }}"
        password: "{{ postgres_password }}"
        db: "{{ postgres_db }}"
        role_attr_flags: "LOGIN CREATEDB"
        state: present

    - name: Create PostgreSQL DB
      become_user: postgres
      postgresql_db:
        name: "{{ postgres_db }}"

    - name: Download and compile SQLite
      block:
        - name: Create download directory
          file:
            path: "{{ sqlite_download_dest_dir }}"
            state: directory

        - name: Download SQLite
          get_url:
            url: "{{ sqlite_download_url }}"
            dest: "{{ sqlite_download_dest_dir }}/{{ sqlite_downloaded_filename }}"

        - name: Extract SQLite
          unarchive:
            src: "{{ sqlite_download_dest_dir }}/{{ sqlite_downloaded_filename }}"
            dest: "{{ sqlite_download_dest_dir }}"
            remote_src: yes
          register: sqlite_unarchive_result

        - name: Compile and install SQLite
          command: "{{ item }}"
          args:
            chdir: "{{ sqlite_unarchive_result.dest }}/{{ sqlite_downloaded_filename | basename | regex_replace('.tar.gz$', '') }}"
          loop:
            - ./configure --prefix={{ sqlite_install_prefix }} --enable-shared --enable-fts5
            - make -j$(nproc)
            - make install

- name: Setup Django Web Environment on Rocky Linux
  hosts: localhost
  become: yes
  gather_facts: yes

  vars:
    user_name: "{{ ansible_user | default('ec2-user') }}"
    user_home: "/home/{{ user_name }}"
    django_project_name: "onpremweb"
    django_project_config_name: "onprem_project_config"
    django_version: "3.2.25"
    project_root_dir: "{{ user_home }}/{{ django_project_name }}"
    venv_dir: "{{ project_root_dir }}/venv"
    apache_conf_template: "/etc/httpd/conf.d/{{ django_project_name }}.conf"
    apache_wsgi_daemon_name: "onpremweb_daemon"
    secret_key_path: "{{ user_home }}/.django_secret.key"
    postgres_user: "django"
    postgres_password: "changeme123"
    postgres_db: "onpremwebdb"

  tasks:
    - name: Install Apache and mod_wsgi
      dnf:
        name:
          - httpd
          - mod_wsgi
        state: present

    - name: Ensure Apache is started and enabled
      service:
        name: httpd
        state: started
        enabled: yes

    - name: Create project root directory
      file:
        path: "{{ project_root_dir }}"
        state: directory
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: '0755'

    - name: Create Python virtual environment
      command: python3 -m venv {{ venv_dir }}
      args:
        creates: "{{ venv_dir }}/bin/activate"

    - name: Install Python requirements
      pip:
        name:
          - wheel
          - django=={{ django_version }}
          - psycopg2-binary
        virtualenv: "{{ venv_dir }}"

    - name: Create Django project
      command: "{{ venv_dir }}/bin/django-admin startproject {{ django_project_config_name }} ."
      args:
        chdir: "{{ project_root_dir }}"
        creates: "{{ project_root_dir }}/manage.py"

    - name: Create static/media directories
      loop:
        - staticfiles
        - mediafiles
      file:
        path: "{{ project_root_dir }}/{{ item }}"
        state: directory
        owner: "{{ user_name }}"
        group: "{{ user_name }}"

    - name: Generate secret key if not exists
      shell: "openssl rand -base64 48 > {{ secret_key_path }}"
      args:
        creates: "{{ secret_key_path }}"

    - name: Configure Django settings.py
      blockinfile:
        path: "{{ project_root_dir }}/{{ django_project_config_name }}/settings.py"
        marker: "# {mark} ANSIBLE MANAGED SETTINGS"
        block: |
          import os
          with open('{{ secret_key_path }}') as f:
              SECRET_KEY = f.read().strip()
          DEBUG = False
          ALLOWED_HOSTS = ['{{ allowed_host_domain }}']
          DATABASES = {
              'default': {
                  'ENGINE': 'django.db.backends.postgresql_psycopg2',
                  'NAME': '{{ postgres_db }}',
                  'USER': '{{ postgres_user }}',
                  'PASSWORD': '{{ postgres_password }}',
                  'HOST': 'localhost',
                  'PORT': '5432',
              }
          }

    - name: Run Django migrate
      command: "{{ venv_dir }}/bin/python manage.py migrate"
      args:
        chdir: "{{ project_root_dir }}"

    - name: Create Django superuser
      shell: |
        echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username='admin').exists() or User.objects.create_superuser('admin', 'admin@example.com', 'admin123')" | {{ venv_dir }}/bin/python manage.py shell
      args:
        chdir: "{{ project_root_dir }}"

    - name: Collect static files
      command: "{{ venv_dir }}/bin/python manage.py collectstatic --noinput"
      args:
        chdir: "{{ project_root_dir }}"

    - name: Set SELinux context for Django project
      sefcontext:
        target: "{{ project_root_dir }}(/.*)?"
        setype: httpd_sys_content_t
        state: present

    - name: Set SELinux context for mediafiles
      sefcontext:
        target: "{{ project_root_dir }}/mediafiles(/.*)?"
        setype: httpd_sys_rw_content_t
        state: present

    - name: Enable SELinux booleans
      seboolean:
        name: "{{ item }}"
        state: true
        persistent: yes
      loop:
        - httpd_can_network_connect
        - httpd_can_network_connect_db

    - name: Create Apache config file
      copy:
        dest: "{{ apache_conf_template }}"
        content: |
          WSGIDaemonProcess {{ apache_wsgi_daemon_name }} \
            user={{ user_name }} group={{ user_name }} \
            python-home={{ venv_dir }} \
            python-path={{ project_root_dir }}:{{ project_root_dir }}/{{ django_project_config_name }}:/usr/lib/python3.9/site-packages \
            processes=2 threads=5 maximum-requests=1000 display-name=%{GROUP}

          <VirtualHost *:80>
              ServerName {{ allowed_host_domain }}
              Alias /static/ {{ project_root_dir }}/staticfiles/
              <Directory {{ project_root_dir }}/staticfiles>
                  Require all granted
              </Directory>

              Alias /media/ {{ project_root_dir }}/mediafiles/
              <Directory {{ project_root_dir }}/mediafiles>
                  Require all granted
              </Directory>

              WSGIScriptAlias / {{ project_root_dir }}/{{ django_project_config_name }}/wsgi.py
              WSGIProcessGroup {{ apache_wsgi_daemon_name }}
              WSGIApplicationGroup %{GLOBAL}
              <Directory {{ project_root_dir }}/{{ django_project_config_name }}>
                  <Files wsgi.py>
                      Require all granted
                  </Files>
              </Directory>

              ErrorLog /var/log/httpd/onpremweb-error.log
              CustomLog /var/log/httpd/onpremweb-access.log combined
          </VirtualHost>
      notify: Restart Apache

  handlers:
    - name: Restart Apache
      service:
        name: httpd
        state: restarted
