# ansible_env_ready.yml
# 수정 22: C-extension psycopg2 제거(python3-psycopg2), psycopg2-binary 설치, Apache conf 오타(“>>”) 수정
- name: Setup PostgreSQL, Django App, Apache with venv mod_wsgi on Rocky Linux
  hosts: localhost
  become: yes
  gather_facts: yes

  vars:
    app_user: "apache"
    app_home: "/var/www/onpremweb"
    repo_url: "https://github.com/negun2/soldesk.git"
    repo_version: "main"
    repo_subdir: "onpremweb"
    postgres_user: "django"
    postgres_password: "changeme123"
    postgres_db: "onpremwebdb"
    venv_dir: "{{ app_home }}/venv"

  tasks:
    - name: Install system packages
      dnf:
        name:
          - epel-release
          - python3
          - python3-pip
          - python3-devel
          - gcc
          - git
          - wget
          - curl
          - readline-devel
          - zlib-devel
          - libffi-devel
          - openssl-devel
          - postgresql-server
          - postgresql-contrib
          - postgresql-devel
          # - python3-psycopg2    ← 제거: mod_wsgi에서 C-extension 매핑 에러 방지
          - firewalld
          - httpd
          - python3-mod_wsgi
          - httpd-devel
          - policycoreutils-python-utils
        state: present

    - name: Ensure psycopg2 is available to Ansible
      pip:
        name: psycopg2-binary
        executable: pip3

    - name: Start and enable firewalld
      service:
        name: firewalld
        state: started
        enabled: yes

    - name: Open firewall ports
      firewalld:
        port: "{{ item }}"
        permanent: yes
        state: enabled
        immediate: yes
      loop:
        - 5432/tcp
        - 80/tcp
        - 443/tcp

    - name: Initialize PostgreSQL database
      command: postgresql-setup --initdb
      args:
        creates: /var/lib/pgsql/data/PG_VERSION

    - name: Configure PostgreSQL listen_addresses
      lineinfile:
        path: /var/lib/pgsql/data/postgresql.conf
        regexp: '^#?listen_addresses'
        line: "listen_addresses = '*'"

    - name: Allow remote access in pg_hba.conf
      lineinfile:
        path: /var/lib/pgsql/data/pg_hba.conf
        insertafter: '^# IPv4'
        line: "host    all             all             0.0.0.0/0               md5"

    - name: Start and enable PostgreSQL
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Create PostgreSQL user
      become_user: postgres
      community.postgresql.postgresql_user:
        name: "{{ postgres_user }}"
        password: "{{ postgres_password }}"
        role_attr_flags: "LOGIN,CREATEDB"
        state: present

    - name: Create PostgreSQL database
      become_user: postgres
      community.postgresql.postgresql_db:
        name: "{{ postgres_db }}"
        owner: "{{ postgres_user }}"
        state: present

    - name: Clone project repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ app_home }}"
        version: "{{ repo_version }}"
        force: yes

    - name: Update project code to latest
      git:
        repo: "{{ repo_url }}"
        dest: "{{ app_home }}"
        version: "{{ repo_version }}"
        force: yes
        update: yes
      notify: Reload Apache

    - name: Make migrations for community app
      command: "{{ venv_dir }}/bin/python manage.py makemigrations community"
      args:
        chdir: "{{ app_home }}/{{ repo_subdir }}"
      notify: Reload Apache

    - name: Apply migrations
      command: "{{ venv_dir }}/bin/python manage.py migrate"
      args:
        chdir: "{{ app_home }}/{{ repo_subdir }}"
      notify: Reload Apache

    - name: Create Python virtual environment
      command: python3 -m venv {{ venv_dir }}
      args:
        creates: "{{ venv_dir }}/bin/activate"

    - name: Install Python requirements
      pip:
        requirements: "{{ app_home }}/{{ repo_subdir }}/requirements.txt"
        virtualenv: "{{ venv_dir }}"

    - name: Install psycopg2-binary into venv
      pip:
        name: psycopg2-binary
        virtualenv: "{{ venv_dir }}"

    - name: Copy .env example
      copy:
        src: "{{ app_home }}/{{ repo_subdir }}/.env.example"
        dest: "{{ app_home }}/{{ repo_subdir }}/.env"
        remote_src: yes

    - name: Update .env with DB creds
      lineinfile:
        path: "{{ app_home }}/{{ repo_subdir }}/.env"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: '^POSTGRES_DB',       line: "POSTGRES_DB={{ postgres_db }}" }
        - { regexp: '^POSTGRES_USER',     line: "POSTGRES_USER={{ postgres_user }}" }
        - { regexp: '^POSTGRES_PASSWORD', line: "POSTGRES_PASSWORD={{ postgres_password }}" }

    - name: Generate Django SECRET_KEY
      command: "openssl rand -hex 32"
      register: django_secret
      changed_when: false

    - name: Ensure SECRET_KEY is set in .env
      lineinfile:
        path: "{{ app_home }}/{{ repo_subdir }}/.env"
        regexp: '^SECRET_KEY='
        line: "SECRET_KEY={{ django_secret.stdout }}"
        create: yes

    - name: Ensure DEBUG=True in .env
      lineinfile:
        path: "{{ app_home }}/{{ repo_subdir }}/.env"
        regexp: '^DEBUG='
        line: "DEBUG=True"
        create: yes

    - name: Ensure ALLOWED_HOSTS in .env
      lineinfile:
        path: "{{ app_home }}/{{ repo_subdir }}/.env"
        regexp: '^ALLOWED_HOSTS='
        line: "ALLOWED_HOSTS=localhost,127.0.0.1,192.168.8.10"
        create: yes

    - name: Run Django migrations
      command: "{{ venv_dir }}/bin/python manage.py migrate"
      args:
        chdir: "{{ app_home }}/{{ repo_subdir }}"

    - name: Pull community app updates
      git:
        repo: "https://github.com/negun2/soldesk.git"
        dest: "{{ app_home }}"
        version: "{{ repo_version }}"
        force: yes

    - name: Run makemigrations for community app
      command: "{{ venv_dir }}/bin/python manage.py makemigrations community"
      args:
        chdir: "{{ app_home }}/{{ repo_subdir }}"

    - name: Apply new migrations
      command: "{{ venv_dir }}/bin/python manage.py migrate"
      args:
        chdir: "{{ app_home }}/{{ repo_subdir }}"

    - name: Collect static files (update)
      command: "{{ venv_dir }}/bin/python manage.py collectstatic --noinput"
      args:
        chdir: "{{ app_home }}/{{ repo_subdir }}"    

    - name: Collect static files
      command: "{{ venv_dir }}/bin/python manage.py collectstatic --noinput"
      args:
        chdir: "{{ app_home }}/{{ repo_subdir }}"

    - name: Ensure templates directory exists
      file:
        path: "{{ app_home }}/{{ repo_subdir }}/templates"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: "0755"

    - name: Deploy index.html into templates
      copy:
        dest: "{{ app_home }}/{{ repo_subdir }}/templates/index.html"
        content: |
          <!DOCTYPE html>
          <html>
          <head><meta charset="utf-8"><title>On-Premise Web</title></head>
          <body>
            <h1>Welcome to On-Premise Web</h1>
            <nav>
              <a href="/">Home</a> |
              <a href="/signup/">Sign Up</a> |
              <a href="/login/">Login</a>
            </nav>
          </body>
          </html>
        owner: root
        group: root
        mode: '0644'

    - name: Patch Django URLconf for root view
      block:
        - name: Ensure TemplateView import
          lineinfile:
            path: "{{ app_home }}/{{ repo_subdir }}/onprem_project_config/urls.py"
            insertafter: "^from django.urls import"
            line: "from django.views.generic import TemplateView"
        - name: Replace root pattern with TemplateView
          replace:
            path: "{{ app_home }}/{{ repo_subdir }}/onprem_project_config/urls.py"
            regexp: "path\\('',.*\\),"
            replace: "path('', TemplateView.as_view(template_name='index.html'), name='home'),"
      notify: Reload Apache

    - name: Patch wsgi.py to include project root in sys.path   # § WSGI 경로 패치
      blockinfile:
        path: "{{ app_home }}/{{ repo_subdir }}/onprem_project_config/wsgi.py"
        insertafter: "import os"
        block: |
          import sys
          # 프로젝트 루트를 Python 경로에 추가
          sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))
      notify: Reload Apache

    - name: Configure Apache site
      copy:
        dest: /etc/httpd/conf.d/onpremweb.conf
        content: |
          <VirtualHost *:80>
            ServerName localhost

            WSGIDaemonProcess onpremweb processes=2 threads=15 python-home={{ venv_dir }}
            WSGIProcessGroup onpremweb
            WSGIApplicationGroup %{GLOBAL}
            WSGIScriptAlias / {{ app_home }}/{{ repo_subdir }}/onprem_project_config/wsgi.py

            <Directory {{ app_home }}/{{ repo_subdir }}/onprem_project_config>
              <Files wsgi.py>
                Require all granted
              </Files>
            </Directory>

            Alias /static/ {{ app_home }}/{{ repo_subdir }}/staticfiles_collected/
            <Directory {{ app_home }}/{{ repo_subdir }}/staticfiles_collected>
              Require all granted
            </Directory>
          </VirtualHost>
      notify: Reload Apache

    - name: Set SELinux context (ignore failures)
      command: semanage fcontext -a -t httpd_sys_content_t '{{ app_home }}(/.*)?'
      ignore_errors: yes

    - name: Allow HTTPD to execute Python modules in venv
      command: semanage fcontext -a -t httpd_sys_script_exec_t '{{ venv_dir }}(/.*)?'
      ignore_errors: yes

    - name: Restore SELinux context on venv
      command: restorecon -Rv '{{ venv_dir }}'
      ignore_errors: yes

    - name: Restore SELinux context (ignore failures)
      command: restorecon -Rv '{{ app_home }}'
      ignore_errors: yes

    - name: Ensure Apache ServerName set
      lineinfile:
        path: /etc/httpd/conf/httpd.conf
        regexp: '^#?ServerName'
        line: 'ServerName localhost'
      notify: Reload Apache

    - name: Ensure venv is owned by apache
      file:
        path: "{{ venv_dir }}"
        owner: apache
        group: apache
        recurse: yes


    - name: Validate Apache config
      command: httpd -t
      register: apache_syntax
      changed_when: false
      failed_when: apache_syntax.rc != 0

    - name: Show Apache syntax errors
      debug:
        msg: "{{ apache_syntax.stderr_lines }}"
      when: apache_syntax.rc != 0

    - name: Allow Apache to connect to network databases (SELinux)
      seboolean:
        name: httpd_can_network_connect_db
        state: yes
        persistent: yes

    - name: Allow Apache to connect to network databases (SELinux) via command
      command: setsebool -P httpd_can_network_connect_db 1


    - name: Start/restart Apache
      service:
        name: httpd
        state: restarted

  handlers:
    - name: Reload Apache
      service:
        name: httpd
        state: reloaded
