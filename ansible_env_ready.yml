---
- name: Setup Base System and Dependencies (Multi-OS)
  hosts: localhost
  gather_facts: yes
  become: yes

  vars:
    sqlite_download_url: "https://raw.githubusercontent.com/negun2/soldesk/main/files/sqlite-snapshot-202505171106.tar.gz"
    sqlite_downloaded_filename: "sqlite-snapshot-202505171106.tar.gz"
    sqlite_download_dest_dir: "/tmp/sqlite_downloaded"
    sqlite_install_prefix: "/usr/local"
    os_vars_base_url: "https://raw.githubusercontent.com/negun2/soldesk/main/vars"
    downloaded_vars_dir: "/tmp/downloaded_os_vars"

  tasks:
    - name: Create directory for downloaded OS vars files
      file:
        path: "{{ downloaded_vars_dir }}"
        state: directory
        mode: '0755'

    - name: Download OS-specific var files from GitHub
      get_url:
        url: "{{ os_vars_base_url }}/{{ item }}"
        dest: "{{ downloaded_vars_dir }}/{{ item }}"
        mode: '0644'
      loop:
        - "RedHat.yml"
        - "Debian.yml"
      ignore_errors: yes

    - name: Include OS-specific vars
      include_vars: "{{ downloaded_vars_dir }}/{{ ansible_os_family }}.yml"

    - name: Install IUS Community repository (RedHat family only)
      yum:
        name: "https://repo.ius.io/ius-release-el7.rpm"
        state: present
        disable_gpg_check: yes
      when: ansible_os_family == "RedHat"

    - name: Install base packages (RedHat)
      yum:
        name:
          - epel-release
          - python3
          - python3-pip
          - gcc
          - "{{ python_dev_package_name }}"
          - "{{ apache_package_name }}"
          - "{{ apache_dev_package_name }}"
          - "{{ mod_wsgi_package_name_system }}"
          - "{{ python_virtualenv_package_name }}"
          - wget
          - "{{ readline_dev_package_name }}"
          - "{{ zlib_dev_package_name }}"
          - "{{ libffi_dev_package_name }}"
          - "{{ libssl_dev_package_name }}"
          - "{{ policycoreutils_package_name }}"
        state: present
      when: ansible_os_family == "RedHat"

    - name: Install base packages (Debian)
      apt:
        name:
          - python3
          - python3-pip
          - gcc
          - "{{ python_dev_package_name }}"
          - "{{ apache_package_name }}"
          - "{{ apache_dev_package_name }}"
          - "{{ mod_wsgi_package_name_system }}"
          - "{{ python_virtualenv_package_name }}"
          - wget
          - "{{ readline_dev_package_name }}"
          - "{{ zlib_dev_package_name }}"
          - "{{ libffi_dev_package_name }}"
          - "{{ libssl_dev_package_name }}"
          - "{{ apparmor_utils_package_name }}"
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install development tools
      block:
        - name: Install 'Development Tools' group (RedHat)
          yum:
            name: "@Development Tools"
            state: present
          when: ansible_os_family == "RedHat"

        - name: Install 'build-essential' (Debian)
          apt:
            name: build-essential
            state: present
          when: ansible_os_family == "Debian"

    - name: Download and compile SQLite
      block:
        - name: Create download directory
          file:
            path: "{{ sqlite_download_dest_dir }}"
            state: directory
            mode: '0755'

        - name: Download SQLite source
          get_url:
            url: "{{ sqlite_download_url }}"
            dest: "{{ sqlite_download_dest_dir }}/{{ sqlite_downloaded_filename }}"
            mode: '0644'
          register: sqlite_download_status
          until: sqlite_download_status is succeeded
          retries: 3
          delay: 5

        - name: Unarchive SQLite
          unarchive:
            src: "{{ sqlite_download_dest_dir }}/{{ sqlite_downloaded_filename }}"
            dest: "{{ sqlite_download_dest_dir }}"
            remote_src: yes
          register: sqlite_unarchive_result

        - name: Configure, build, and install SQLite
          command: "{{ item }}"
          args:
            chdir: "{{ sqlite_unarchive_result.dest }}/{{ sqlite_downloaded_filename | basename | regex_replace('.tar.gz$', '') }}"
          loop:
            - "./configure --prefix={{ sqlite_install_prefix }} --enable-shared --enable-fts5"
            - "make -j{{ ansible_processor_vcpus | default(1) }}"
            - "make install"

        - name: Configure dynamic linker for SQLite
          copy:
            content: "{{ sqlite_install_prefix }}/lib"
            dest: /etc/ld.so.conf.d/sqlite3-custom.conf
            mode: '0644'
          notify: Run ldconfig

        - name: Clean up SQLite source
          file:
            path: "{{ sqlite_download_dest_dir }}"
            state: absent

  handlers:
    - name: Run ldconfig
      command: ldconfig

- name: Setup Django Web Environment (Multi-OS)
  hosts: localhost
  become: yes
  gather_facts: yes

  vars:
    django_project_name: "onpremweb"
    django_project_config_name: "onprem_project_config"
    django_version: "3.2.25"
    os_vars_base_url: "https://raw.githubusercontent.com/negun2/soldesk/main/vars"
    downloaded_vars_dir: "/tmp/downloaded_os_vars"
    apache_conf_template_download_url: "https://raw.githubusercontent.com/negun2/soldesk/main/templates/django_onpremweb.conf.j2"
    apache_conf_template_downloaded_filename: "django_onpremweb.conf.j2"
    target_user_home: "/var/www"
    project_root_dir: "{{ target_user_home }}/{{ django_project_name }}"
    venv_dir: "{{ project_root_dir }}/venv"
    apache_wsgi_daemon_name: "onpremweb_daemon"
    server_name_ip: "{{ ansible_default_ipv4.address | default('127.0.0.1') }}"

  tasks:
    - name: Include OS-specific vars
      include_vars: "{{ downloaded_vars_dir }}/{{ ansible_os_family }}.yml"

    - name: Create required directories and virtualenv
      block:
        - name: Ensure project directory
          file:
            path: "{{ project_root_dir }}"
            state: directory
            owner: "{{ target_user }}"
            group: "{{ target_user }}"
            mode: '0755'

        - name: Create Python virtual environment
          command: "python3 -m venv {{ venv_dir }}"
          args:
            creates: "{{ venv_dir }}/bin/activate"

        - name: Change ownership of venv
          file:
            path: "{{ venv_dir }}"
            owner: "{{ target_user }}"
            group: "{{ target_user }}"
            recurse: yes

    - name: Install Python dependencies in virtualenv
      pip:
        name:
          - wheel
          - "django=={{ django_version }}"
          - mod_wsgi
        virtualenv: "{{ venv_dir }}"

    - name: Download Apache config template
      get_url:
        url: "{{ apache_conf_template_download_url }}"
        dest: "/tmp/{{ apache_conf_template_downloaded_filename }}"
        mode: '0644'

    - name: Deploy Apache virtual host config
      template:
        src: "/tmp/{{ apache_conf_template_downloaded_filename }}"
        remote_src: yes
        dest: "{{ apache_conf_dir }}/{{ django_project_name }}.conf"
        owner: root
        group: root
        mode: '0644'
      notify: Restart Apache

    - name: Start and enable Apache
      service:
        name: "{{ apache_service_name }}"
        state: started
        enabled: yes

  handlers:
    - name: Restart Apache
      service:
        name: "{{ apache_service_name }}"
        state: restarted
